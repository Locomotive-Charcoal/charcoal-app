<?php

namespace Charcoal\App\Action;

// Dependencies from `PHP`
use \InvalidArgumentException;

// PSR-3 (logger) dependencies
use \Psr\Log\LoggerAwareInterface;
use \Psr\Log\LoggerAwareTrait;

// PSR-7 (http messaging) dependencies
use \Psr\Http\Message\RequestInterface;
use \Psr\Http\Message\ResponseInterface;


// Intra-module (`charcoal-app`) dependencies
use \Charcoal\App\AppAwareInterface;
use \Charcoal\App\AppAwareTrait;
use \Charcoal\App\AppInterface;
use \Charcoal\App\Action\ActionInterface;

/**
 * Default implementation, as abstract class, of  the `ActionInterface`.
 *
 * Actions respond to a (PSR7-style) request and response and returns back the response.
 *
 * Typical implementations only need to implement the following 2 _abstract_ methods:
 *
 * ``` php
 * // Returns an associative array of results
 * public function results();
 * // Gets a psr7 request and response and returns a response
 * public function run(RequestInterface $request, ResponseInterface $response);
 * ```
 * Actions can be invoked (with the magic `__invoke()` method) which automatically call the:
 */
abstract class AbstractAction implements
    ActionInterface,
    AppAwareInterface,
    LoggerAwareInterface
{
    use AppAwareTrait;
    use LoggerAwareTrait;

    const MODE_JSON = 'json';
    const MODE_REDIRECT = 'redirect';
    const DEFAULT_MODE = self::MODE_JSON;

    /**
     * @var string $mode
     */
    private $mode = self::DEFAULT_MODE;

    /**
     * @var boolean $success
     */
    private $success = false;

    /**
     * @var string $success_url
     */
    private $success_url;

    /**
     * @var string $failure_url
     */
    private $failure_url;

    /**
     * @param array $data The dependencies (app and logger).
     */
    public function __construct(array $data = null)
    {
        if (isset($data['logger'])) {
            $this->setLogger($data['logger']);
        }

        $this->set_app($data['app']);
    }

    /**
     * @param RequestInterface  $request  A PSR-7 compatible Request instance.
     * @param ResponseInterface $response A PSR-7 compatible Response instance.
     * @return ResponseInterface
     */
    final public function __invoke(RequestInterface $request, ResponseInterface $response)
    {
        $response = $this->run($request, $response);

        switch ($this->mode()) {
            case self::MODE_JSON:
                $response = $response
                    ->withHeader('Content-Type', 'application/json')
                    ->write(json_encode($this->results()));
                break;

            case self::MODE_REDIRECT:
                $response = $response
                    ->withStatus(301)
                    ->withHeader('Location', $this->redirect_url());
                break;
        }

        return $response;
    }

    /**
     * @param array $data The data to set.
     * @return AbstractAction Chainable
     */
    public function set_data(array $data)
    {
        foreach ($data as $prop => $val) {
            $func = [$this, 'set_'.$prop];

            if ($val === null) {
                continue;
            }

            if (is_callable($func)) {
                call_user_func($func, $val);
                unset($data[$prop]);
            } else {
                $this->{$prop} = $val;
            }
        }
        return $this;
    }

    /**
     * @param string $mode The action mode.
     * @throws InvalidArgumentException If the mode argument is not a string.
     * @return ActionInterface Chainable
     */
    public function set_mode($mode)
    {
        if (!is_string($mode)) {
            throw new InvalidArgumentException(
                'Mode needs to be a string'
            );
        }
        $this->mode = $mode;
        return $this;
    }

    /**
     * @return string
     */
    public function mode()
    {
        return $this->mode;
    }

    /**
     * @param boolean $success Success flag (true / false).
     * @throws InvalidArgumentException If the success argument is not a boolean.
     * @return ActionInterface Chainable
     */
    public function set_success($success)
    {
        $this->success = !!$success;
        return $this;
    }

    /**
     * @return boolean
     */
    public function success()
    {
        return $this->success;
    }

    /**
     * @param mixed $url The success URL (translation string).
     * @return ActionInterface Chainable
     */
    public function set_success_url($url)
    {
        $this->success_url = $url;
        return $this;
    }

    /**
     * @return string
     */
    public function success_url()
    {
        return $this->success_url;
    }

    /**
     * @param mixed $url The success URL (translation string).
     * @return ActionInterface Chainable
     */
    public function set_failure_url($url)
    {
        $this->failure_url = $url;
        return $this;
    }

    /**
     * @return string
     */
    public function failure_url()
    {
        return $this->failure_url;
    }

    /**
     * @return string
     */
    public function redirect_url()
    {
        if ($this->success() === true) {
            $url = $this->success_url();
        } else {
            $url = $this->failure_url();
        }

        if ($url === null) {
            return '';
        }

        // Get the translated URL
        $url = $url->val($this->language());
        if (!$url) {
            $url = '';
        }
        return $url;
    }

    /**
     * Returns an associative array of results (set after being  invoked / run).
     *
     * The raw array of results will be called from `__invoke()`.
     *
     * @return array
     */
    abstract public function results();

    /**
     * Gets a psr7 request and response and returns a response.
     *
     * Called from `__invoke()` as the first thing.
     *
     * @param RequestInterface  $request  A PSR-7 compatible Request instance.
     * @param ResponseInterface $response A PSR-7 compatible Response instance.
     * @return ResponseInterface
     */
    abstract public function run(RequestInterface $request, ResponseInterface $response);
}

