{"name":"Charcoal-app","tagline":"Slim-based application (modules, routes / controllers and middlewares)","body":"Charcoal App\r\n============\r\n\r\n`Charcoal\\App` is a framework to create _Charcoal_ applications with **Slim 3**. It is actually a small layer on top of Slim to load the proper routes / controllers and middlewares from a configuration file.\r\n\r\n[![Build Status](https://travis-ci.org/locomotivemtl/charcoal-app.svg?branch=master)](https://travis-ci.org/locomotivemtl/charcoal-app)\r\n\r\n# How to install\r\n\r\nThe preferred (and only supported) way of installing _charcoal-app_ is with **composer**:\r\n\r\n```shell\r\n$ composer require locomotivemtl/charcoal-app\r\n```\r\n\r\n## Dependencies\r\n\r\n- [`PHP 5.5+`](http://php.net)\r\n\t- Older versions of PHP are deprecated, therefore not supported for charcoal-app.\r\n- [`locomotivemtl/charcoal-config`](https://github.com/locomotivemtl/charcoal-config)\r\n\t-  The basic configuration container.\r\n- [`locomotivemtl/charcoal-factory`](https://github.com/locomotivemtl/charcoal-factory)\r\n\t- Dynamic object creation.\r\n- [`locomotivemtl/charcoal-view`](https://github.com/locomotivemtl/charcoal-view)\r\n\t- Template controllers will typically load a _View_ object  (or a _Renderer_, for PSR7 / Slim compatibility) and render a template.\r\n\t- This brings a dependency on [`mustache/mustache`](https://github.com/bobthecow/mustache.php).\r\n- [`slim/slim`](https://github.com/slimphp/Slim)\r\n\t- The main app, container and router are provided by Slim.\r\n\t- Its dependencies are:\r\n\t\t-  [`pimple/pimple`](http://pimple.sensiolabs.org/)\r\n\t\t-  [`psr/http-message`]((http://www.php-fig.org/psr/psr-7/))\r\n\t\t-  [`nikic/fast-route`](https://github.com/nikic/FastRoute)\r\n\r\n> ðŸ‘‰ Development dependencies, which are optional when using charcoal-app in a project, are described in the [Development](#development) section of this README file.\r\n\r\n### The PSR-7 standard (http messages)\r\n\r\nJust like _Slim_, charcoal-app is built around the [`psr-7`](http://www.php-fig.org/psr/psr-7/) standard.\r\n\r\n_Charcoal Actions_ are typically ran either by the `run()` method or by inkoking an action instance (with the `__invoke()` magic method). This method takes a _RequestInterface_ and a _ResponseInterface_ as parameters and returns a _ResponseInterface_.\r\n\r\nSimilarly, when a `Charcoal\\View\\Renderer` is used as a renderer (instead of a plain view), the `render()` method accepts (and returns) a _ResponseInterface_ object.\r\n\r\n# Components\r\n\r\nThe main components of charcoal-app are _App_, _Module_, _Route_ (and _Routable_ objects), _RequestController_, _Middleware_ and the _Binary (Charcoal Script)_.\r\n\r\n## App\r\n\r\n- The *App* loads the root onfiguration.\r\n\t- **App**: _implements_ `\\Charcoal\\App\\App`\r\n\t- **Config**: `\\Charcoal\\App\\AppConfig`\r\n\t\t- The `AppConfig` expects a key called `modules`\r\n\t\t\t- Each modules have an ident and a sub-configuration (`ModuleConfig`)\r\n\t- **Container**: Dependencies are expected to be in a `Pimple` container\r\n\r\n- The *App* has one method: `setup()` wich:\r\n\t- Accepts a `\\Slim\\App` as a parameter.\r\n\t- Instanciate a `ModuleManager` which:\r\n\t\t- Loop all `modules` from the `AppConfiguration` and create new *Modules* according to the configuration.\r\n\t\t- (The Module creation is done statically via it's `setup()` abstract method)\r\n\r\n> ðŸ‘‰ The `App` concept is entirely optional. Modules could be loaded without one.\r\n\r\n### App configuration\r\n\r\n`\\Charcoal\\App\\AppConfig` API:\r\n\r\n| Key         | Type             | Default | Description |\r\n| ----------- | ---------------- | ------- | ----------- |\r\n| **routes**  | `RouteConfig[]`  | `[]`    | ...         |\r\n| **modules** | `ModuleConfig[]` | `[]`    | ...         |\r\n\r\n## Module\r\n\r\n- A *Module* loads its configuration from the root config\r\n\t- **Module**: _implements_ `Charcoal\\App\\ModuleInterface`\r\n\t- **Config**: `\\Charcoal\\App\\ModuleConfig`\r\n\t\t- The `ModuleConfig\r\n\r\n- A *Module* requires:\r\n\t- A parent **Container**\r\n\t- A `\\Slim\\App`\r\n\r\n- A *Module* defines:\r\n\t- **Routes**: which defines a path to load and a `RequestController` configuration.\r\n\t- **Middlewares**: which are TBD.\r\n\r\n## Routes and RequestController\r\n\r\nAll routes are actually handled by the *Slim* app. Charcoal Routes are just *definition* of a route:\r\n\r\n- An identifier, which typically matches the controller.\r\n- A RouteConfig structure, which contains:\r\n\t- The `type` of  `RequestController`. This can be:\r\n\t\t- `Action`\r\n\t\t- `Script` (_Scripts_ can only be ran from the CLI.)\r\n\t\t- `Template`\r\n\t- The `controller` ident\r\n\r\n### Route API\r\n\r\n> ðŸ‘‰ Slim's routing is actually provided by [FastRoute](https://github.com/nikic/FastRoute)\r\n\r\nCommon route configuration:\r\n\r\n| Key             | Type       | Default     | Description |\r\n| --------------- | ---------- | ----------- | ----------- |\r\n| **ident**       | `string`   | `null`      | Route identifier. |\r\n| **methods**     | `string[]` | `[ 'GET' ]` | The HTTP methods to wthich this route resolve to. Ex: `['GET', 'POST', 'PUT', 'DELETE']` |\r\n| **controller**  | `string`   | `null`      | Controller identifier. Will be guessed from the _ident_ when `null`. |\r\n| **lang**        | `string`   | `null`      | The current language. |\r\n| **group**       | `string`   | `null`      | |\r\n\r\nTemplate specific configuration:\r\n\r\n| Key               | Type     | Default      | Description |\r\n| ----------------- | -------- | ------------ | ----------- |\r\n| **template**      | `string` | `null`       | The template _ident_ to display. |\r\n| **engine**        | `string` | `'mustache'` | The template _engine_ type. Default Charcoal view engines are `mustache`, `php` and `php-mustache`. |\r\n| **template_data** | `array`  | `[]`         | Extra / custom template data. |\r\n\r\nThere are 3 types of `Route`:\r\n\r\n- `ActionRoute`: typically executes an action (return JSON) from a _POST_ request.\r\n- `ScriptRoute`: typically ran from the CLI interface.\r\n- `TemplateRoute`: typically  load a template from a _GET_ request. \"A Web page\".\r\n\r\n#### Defining a default route.\r\n\r\nTo set the \"default\" rout, simply map a route to \"/\".\r\n\r\n```json\r\n{\r\n\t\"routes\": {\r\n\t\t\"/\": {\r\n\t\t\t\"template\": \"acme/home\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n## Routable objects\r\n\r\nRoutes are great to match URL path to template controller or action controller, but needs to be defined in the `AppConfig` container.\r\n\r\nRoutables, on the other hand, are dynamic objects (typically, Charcoal Model objects that implements the `Charcoal\\App\\Routable\\RoutableInterface`) whose _route path_ is typically defined from a dynamic property (and stored in a database).\r\n\r\n### The routable callback\r\n\r\nThe `RoutableInterface` / `RoutableTrait` classes have one abstract method: `handle_route($path, $request, $response)` which must be implemented in the routable class.\r\n\r\nThis method should:\r\n\r\n- Check the path to know if it should respond\r\n\t- Typically, this means checking the _path_ parameter against the database to load a matching object.\r\n\t- But really, it could be anything...\r\n- Return a `callable` object that will handle the route if it matches\r\n- Return `null` if no match\r\n\r\nThe returned callable signature should be:\r\n`function(RequestInterface $request, ResponseInterface $response)` and returns a `ResponseInterface`\r\n\r\nRoutables are called last (only if no explicit routes match fisrt). If no routables return a callable, then a 404 will be sent. (Slim's `NotFoundHandler`).\r\n\r\n## Middleware\r\n\r\nMiddleware is not yet implemented in `Charcoal\\App`. The plan is to use the PSR7-middleware system, which is a callable with the signature:\r\n\r\n```\r\nuse \\Psr\\Http\\Message\\RequestInterface as RequestInterface;\r\nuse \\Psr\\Http\\Message\\ResponseInterfac as ResponseInterface;\r\n\r\nmiddleware(RequestInterface $request, ResponseInterface $response) : ResponseInterface\r\n```\r\n\r\n## Binary (Charcoal script)\r\n\r\nAs previously mentionned, `Script` routes are only available to run from the CLI. A script loader is provided in `bin/charcoal`. It will be installed, with composer, in `vendor/bin/charcoal`.\r\n\r\n## Summary\r\n\r\n- An _App_ is a collection of _Modules_, which are a collection of _Routes_ and _Middlewares_.\r\n- _Routes_ are just (config) definitions that match a path to a _RequestController_\r\n\t- There are 3 types of _RequestController_: _Actions_, _Scripts_ and _Templates_.\r\n\r\n## Configuration examples\r\n\r\nExample of a module configuration:\r\n\r\n```json\r\n{\r\n\t\"routes\": {\r\n\t\t\"templates\": {\r\n\t\t\t\"foo/bar\": {},\r\n\t\t\t\"foo/baz/{:id}\": {\r\n\t\t\t\t\"controller\": \"foo/baz\",\r\n\t\t\t\t\"methods\": [ \"GET\", \"POST\" ]\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"default_template\": \"foo_bar\",\r\n\t\t\"actions\": {\r\n\t\t\t\"foo/bar\": {}\r\n\t\t}\r\n\t},\r\n\r\n\t\"routables\": {\r\n\t\t\"charcoal/cms/news\": {}\r\n\t},\r\n\r\n\t\"middlewares\": {}\r\n}\r\n```\r\n\r\n# Usage\r\n\r\nTypical Front-Controller (`index.php`):\r\n\r\n```php\r\ninclude '../vendor/autoload.php';\r\n\r\n$container = new \\Slim\\Container();\r\n\r\n$container['config'] = function() {\r\n\t$config = new \\Charcoal\\App\\AppConfig();\r\n\t$config->add_file('../config/config.php');\r\n\treturn $config;\r\n};\r\n\r\n$slim = new \\Slim\\App($container);\r\n\r\n$app = new \\Charcoal\\App($slim);\r\n$app->setup();\r\n\r\n$slim->run();\r\n```\r\n\r\nIt is also possible to bypass the `Charcoal\\App` totally and simply instanciate each modules manually:\r\n\r\n```php\r\n// ...\r\n$slim = new \\Slim\\App($container);\r\n\r\n\\Charcoal\\Admin\\Module::setup($slim);\r\n\\Charcoal\\Messaging\\Module::setup($slim);\r\n\\Foobar\\Module::setup($slim);\r\n\r\n$slim->run();\r\n```\r\nThis achieves the same result, excepts the *Modules* were not loaded from the root configuration but hard-coded.\r\n\r\nWithout Module to handle routes and middlewares:\r\n\r\n```php\r\n// ...\r\n$slim = new \\Slim\\App($container);\r\n\r\n$container['controller_loader'] = function($c) {\r\n\r\n};\r\n\r\n// Add middleware manually\r\n// $slim->add('\\Foobar\\Middleware\\Foo');\r\n\r\n$slim->get('/', function($request, $response, $args) {\r\n\t$container = $this->getContainer();\r\n\t$request_controller = $container['controller_loader']->get('/');\r\n\treturn $request_controller($request, $response, $args);\r\n});\r\n\r\n$slim->post('/', function() {\r\n\r\n});\r\n```\r\n\r\n## Classes\r\n\r\n- `\\Charcoal\\App\\AbstractModule`\r\n- `\\Charcoal\\App\\App`\r\n- `\\Charcoal\\App\\AppConfig`\r\n- `\\Charcoal\\App\\GenericModule`\r\n- `\\Charcoal\\App\\ModuleInterface`\r\n- `\\Charcoal\\App\\ModuleManager`\r\n- `\\Charcoal\\App\\RequestController`\r\n- `\\Charcoal\\App\\RouteConfig`\r\n- `\\Charcoal\\App\\RouteManager`\r\n\r\n# Development\r\n\r\nTo install the development environment:\r\n\r\n```shell\r\n$ npm install\r\n$ composer install\r\n```\r\n\r\n## Development dependencies\r\n\r\n- `npm`\r\n- `grunt` (install with `npm install grunt-cli`)\r\n- `composer`\r\n- `phpunit`\r\n\r\n## Coding Style\r\n\r\nThe Charcoal-App module follows the Charcoal coding-style:\r\n\r\n- [_PSR-1_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md), except for\r\n\t- Method names MUST be declared in `snake_case`.\r\n- [_PSR-2_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md), except for the PSR-1 requirement.\r\n- [_PSR-4_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md), autoloading is therefore provided by _Composer_\r\n- [_phpDocumentor_](http://phpdoc.org/)\r\n\t- Add DocBlocks for all classes, methods, and functions;\r\n\t- For type-hinting, use `boolean` (instead of `bool`), `integer` (instead of `int`), `float` (instead of `double` or `real`);\r\n\t- Omit the `@return` tag if the method does not return anything.\r\n- Naming conventions\r\n\t- Read the [phpcs.xml](phpcs.xml) file for all the details.\r\n\r\n> Coding style validation / enforcement can be performed with `grunt phpcs`. An auto-fixer is also available with `grunt phpcbf`.\r\n\r\n## Authors\r\n\r\n- Mathieu Ducharme <mat@locomotive.ca>\r\n\r\n## Changelog\r\n\r\n### 0.1\r\n\r\n_Unreleased_\r\n- Initial release\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}